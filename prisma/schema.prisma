// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Profile {
  id              Int     @id @default(autoincrement())
  bio             String? @db.Text
  title           String? @db.VarChar(75)
  instagramHandle String? @db.VarChar(50)
  linkedInLink    String? @db.VarChar(50)
  twitterHandle   String? @db.VarChar(50)
  organization    String? @db.VarChar(75)
  user            User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          Int     @unique
}

model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique @map(name: "compound_id")
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token") @db.Text
  accessToken        String?   @map(name: "access_token") @db.Text
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")

  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map(name: "accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}

model User {
  id                       Int                       @id @default(autoincrement())
  name                     String?
  displayName              String?
  email                    String?                   @unique
  emailVerified            DateTime?                 @map(name: "email_verified")
  email2                   String?                   
  image                    String?
  hasShirt                 Boolean?                  @default(false)
  createdAt                DateTime                  @default(now()) @map(name: "created_at")
  updatedAt                DateTime                  @default(now()) @map(name: "updated_at")
  stripeCustomerId         String?                   @db.VarChar(32)
  profilePath              String?                   @db.VarChar(256)
  hideFromIndexPage        Boolean    @default(false)
  hideFromCheckinPage      Boolean    @default(false)
  subscriptions            Subscription[]
  profile                  Profile?
  subscriptionsWithDetails SubscriptionWithDetails[]
  roles                    Role[]                    @relation("UserToRole")
  sponsorships             Sponsorship[]
  comments                 Comment[]
  reactions                Reaction[]
  referralUserId           Int?
  referralUser             User?                     @relation("referralUser", fields: [referralUserId], references: [id], onDelete: SetNull)

  commentReactions      CommentReaction[]
  notifications         Notification[]        @relation("user")
  notificationsAsSource Notification[]        @relation("sourceUser")
  treeChangeLogs        TreeChangeLog[]
  lastChangedByTrees    Tree[]                @relation("lastChangedByUser")
  createdTrees          Tree[]                @relation("createdByUser")
  createdForms          Form[]                @relation("createdByUser")
  formResponses         FormResponse[]
  Event                 Event[]
  Category              Category[]
  eventCheckIns         EventCheckIn[]
  treeCheckIns          TreeCheckIn[]
  speciesQuizResponses  SpeciesQuizResponse[]
  organizedEvents       Event[]               @relation("OrganizerToEvent")
  groups                TreeGroup[]
  treeToGroupLinks      TreeToGroup[]
  referredUsers         User[]                @relation("referralUser")

  @@map(name: "users")
}

model Role {
  id                  Int        @id @default(autoincrement())
  name                String?
  isAdmin             Boolean    @default(false)
  hasAuthManagement   Boolean    @default(false)
  hasFormManagement   Boolean    @default(false)
  isReviewer          Boolean    @default(false)
  isTreeReviewer      Boolean    @default(false)
  hasMemberManagement Boolean    @default(false)
  hasEventManagement  Boolean    @default(false)
  hasShirtManagement  Boolean    @default(false)
  hasRedirectManagement Boolean    @default(false)
  users               User[]     @relation("UserToRole")
  Event               Event[]
  Category            Category[]
}

model VerificationRequest {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "verification_requests")
}

model Subscription {
  id               Int           @id @default(autoincrement())
  createdDate      DateTime?
  expirationDate   DateTime?
  lastPaymentDate  DateTime?
  status           String?       @db.VarChar(32)
  statusDetails    SubscriptionStatusDetails?
  cancellationDetails String?       @db.VarChar(64)
  cancellationReason String? @db.Text
  stripeCustomerId String?       @db.VarChar(32)
  stripeId         String?       @unique @db.VarChar(32)
  user             User?         @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId           Int?
  product          Product?      @relation(fields: [productId], references: [id])
  productId        Int?
  sponsorships     Sponsorship[]
}

enum SubscriptionStatusDetails {
  Payment_Failed
  Cancelled_Manually
}

model SubscriptionWithDetails {
  id               Int       @unique
  createdDate      DateTime?
  expirationDate   DateTime?
  lastPaymentDate  DateTime?
  status           String?
  statusDetails    SubscriptionStatusDetails?
  cancellationDetails String?
  cancellationReason String?
  stripeId         String?
  stripeCustomerId String?
  stripeProductId  String?
  userId           Int
  userName         String?
  referralUserId   Int?
  productId        Int
  productName      String?
  email            String?
  email2           String?
  hasShirt         Boolean?  @default(false)
  amount           Int
  user             User      @relation(fields: [userId], references: [id])
}

model Comment {
  id              Int               @id @default(autoincrement())
  createdDate     DateTime?         @default(now())
  text            String?
  userId          Int?
  isDeleted       Boolean?          @default(false)
  user            User?             @relation(fields: [userId], references: [id], onDelete: Cascade)
  sponsorshipId   Int?
  sponsorship     Sponsorship?      @relation(fields: [sponsorshipId], references: [id])
  parentCommentId Int?
  parentComment   Comment?          @relation("CommentToComment", fields: [parentCommentId], references: [id])
  childComments   Comment[]         @relation("CommentToComment")
  reactions       CommentReaction[]
}

model CommentReaction {
  id          Int       @id @default(autoincrement())
  createdDate DateTime? @default(now())
  type        String?
  userId      Int?
  user        User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  commentId   Int?
  comment     Comment?  @relation(fields: [commentId], references: [id])
}

model Reaction {
  id            Int          @id @default(autoincrement())
  createdDate   DateTime?    @default(now())
  type          String?
  userId        Int?
  user          User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  sponsorshipId Int?
  sponsorship   Sponsorship? @relation(fields: [sponsorshipId], references: [id])
}

model Notification {
  id           Int       @id @default(autoincrement())
  type         String?
  link         String?
  parameter    String?
  count        Int?
  createdDate  DateTime? @default(now())
  isRead       Boolean?  @default(false)
  userId       Int?
  user         User?     @relation("user", fields: [userId], references: [id], onDelete: Cascade)
  sourceUserId Int?
  sourceUser   User?     @relation("sourceUser", fields: [sourceUserId], references: [id], onDelete: SetNull)
}

model Product {
  id            Int            @id @default(autoincrement())
  stripeId      String?        @unique
  name          String?
  amount        Int?
  subscriptions Subscription[]
}

model Tree {
  id                       Int                   @id @default(autoincrement())
  name                     String?
  createdDate              DateTime?             @default(now())
  pictureUrl               String?
  latitude                 Decimal?              @db.Decimal(8, 5)
  longitude                Decimal?              @db.Decimal(9, 6)
  funFact                  String?               @db.VarChar(512)
  streetViewPitch          String?               @default("")
  streetViewHeading        String?               @default("")
  streetViewLatitude       Decimal?              @db.Decimal(8, 5)
  streetViewLongitude      Decimal?              @db.Decimal(9, 6)
  diameter                 Decimal?              @db.Decimal(5, 2)
  height                   Decimal?              @db.Decimal(6, 2)
  reviewStatus             ReviewStatus?         @default(New)
  sessionId                String?
  sponsorships             Sponsorship[]
  location                 Location?             @relation(fields: [locationId], references: [id])
  locationId               Int?
  species                  Species?              @relation(fields: [speciesId], references: [id])
  speciesId                Int?
  identificationConfidence Int?
  images                   TreeImage[]
  changeLogs               TreeChangeLog[]
  createdByUserId          Int?
  createdByUser            User?                 @relation("createdByUser", fields: [createdByUserId], references: [id], onDelete: SetNull)
  lastChangedByUserId      Int?
  lastChangedByUser        User?                 @relation("lastChangedByUser", fields: [lastChangedByUserId], references: [id], onDelete: SetNull)
  categories               Category[]            @relation("TreeToCategory")
  events                   TreeToEvent[]
  checkIns                 TreeCheckIn[]
  speciesQuizResponses     SpeciesQuizResponse[]
  groupLinks               TreeToGroup[]
}

model TreeToEvent {
  tree     Tree  @relation(fields: [treeId], references: [id], onDelete: Cascade)
  treeId   Int // relation scalar field (used in the `@relation` attribute above)
  event    Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId  Int // relation scalar field (used in the `@relation` attribute above)
  sequence Int   @default(0)

  @@id([treeId, eventId])
}

model TreeGroup {
  id              Int           @id @default(autoincrement())
  name            String?
  description     String?       @db.Text
  createdDate     DateTime?     @default(now())
  pictureUrl      String?
  path            String?       @db.VarChar(256)
  createdByUser   User?         @relation(fields: [createdByUserId], references: [id], onDelete: SetNull)
  createdByUserId Int?
  treeLinks       TreeToGroup[]
}

model TreeToGroup {
  name            String?
  description     String?    @db.Text
  sequence        Int?       @default(0)
  createdDate     DateTime?  @default(now())
  treeId          Int
  tree            Tree?      @relation(fields: [treeId], references: [id])
  groupId         Int
  group           TreeGroup? @relation(fields: [groupId], references: [id])
  createdByUser   User?      @relation(fields: [createdByUserId], references: [id], onDelete: SetNull)
  createdByUserId Int?

  @@id([treeId, groupId])
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String?
  description String?   @db.Text
  createdDate DateTime? @default(now())
  pictureUrl  String?
  path        String?   @db.VarChar(256)
  isPublic    Boolean?  @default(false)
  trees       Tree[]    @relation("TreeToCategory")
  events      Event[]   @relation("CategoryToEvent")
  user        User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId      Int?
  role        Role?     @relation(fields: [roleId], references: [id])
  roleId      Int?
}

model Event {
  id                  Int                   @id @default(autoincrement())
  name                String?
  description         String?               @db.Text
  checkInDetails      String?               @db.Text
  pictureUrl          String?
  startDate           DateTime?
  endDate             DateTime?
  activeStartDate     DateTime?
  activeEndDate       DateTime?
  identifier          String?
  path                String?               @db.VarChar(256)
  instagramPostId     String?               @db.VarChar(64)
  isPrivate           Boolean?              @default(false)
  hasSpecificTrees    Boolean?              @default(false)
  hasNavigation       Boolean?              @default(false)
  location            Location?             @relation(fields: [locationId], references: [id])
  locationId          Int?
  categories          Category[]            @relation("CategoryToEvent")
  user                User?                 @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId              Int?
  organizers          User[]                @relation("OrganizerToEvent")
  role                Role?                 @relation(fields: [roleId], references: [id])
  roleId              Int?
  trees               TreeToEvent[]
  checkIns            EventCheckIn[]
  SpeciesQuizResponse SpeciesQuizResponse[]
}

model TreeCheckIn {
  id             Int       @id @default(autoincrement())
  createdDate    DateTime? @default(now())
  email          String?
  discoveredFrom String?
  userId         Int?
  user           User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  treeId         Int?
  tree           Tree?     @relation(fields: [treeId], references: [id])
}

model EventCheckIn {
  id             Int       @id @default(autoincrement())
  createdDate    DateTime? @default(now())
  email          String?
  emailOptIn     Boolean?  @default(false)
  discoveredFrom String?
  isPrivate      Boolean?  @default(false)
  userId         Int?
  user           User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventId        Int?
  event          Event?    @relation(fields: [eventId], references: [id])

  @@unique([email, eventId])
  @@unique([userId, eventId])
}

enum ChangeLogType {
  Create
  Update
}

model TreeChangeLog {
  id              Int            @id @default(autoincrement())
  type            ChangeLogType? @default(Create)
  createdDate     DateTime?      @default(now())
  attribute       String?
  oldValue        String?
  newValue        String?
  userId          Int?
  user            User?          @relation(fields: [userId], references: [id], onDelete: SetNull)
  treeId          Int?
  tree            Tree?          @relation(fields: [treeId], references: [id])
  transactionUuid String?
}

model Species {
  id              Int      @id @default(autoincrement())
  name            String?
  commonName      String?
  alternateNaming String?  @db.VarChar(512)
  genus           String?
  species         String?
  speciesCode     String?
  growthForm      String?
  percentLeafType String?
  leafType        String?
  growthRate      String?
  longevity       String?
  height          Int?
  familyName      String?
  orderName       String?
  className       String?
  isNative        Boolean? @default(false)
  isInTexas       Boolean? @default(false)
  searchPriority  Int?     @default(0)
  trees           Tree[]
}

model SpeciesQuizResponse {
  id                 Int       @id @default(autoincrement())
  isCorrect          Boolean?  @default(false)
  incorrectGuessName String?   @db.VarChar(128)
  createdDate        DateTime? @default(now())
  user               User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             Int?
  tree               Tree?     @relation(fields: [treeId], references: [id])
  treeId             Int?
  eventId            Int?
  event              Event?    @relation(fields: [eventId], references: [id])

  @@unique([userId, treeId])
}

model Location {
  id                   Int           @id @default(autoincrement())
  name                 String?
  address              String?
  placeName            String?
  latitude             Decimal?      @db.Decimal(8, 5)
  longitude            Decimal?      @db.Decimal(9, 6)
  mapboxId             String?
  mapboxCategories     String?
  mapboxPlaceType      String?
  mapboxPlaceId        String?
  mapboxNeighborhoodId String?
  foursquareId         String?
  minLat               Decimal?      @db.Decimal(8, 5)
  maxLat               Decimal?      @db.Decimal(8, 5)
  minLong              Decimal?      @db.Decimal(9, 6)
  maxLong              Decimal?      @db.Decimal(9, 6)
  neighborhood         Neighborhood? @relation(fields: [mapboxNeighborhoodId], references: [mapboxId])
  place                Place?        @relation(fields: [mapboxPlaceId], references: [mapboxId])
  trees                Tree[]
  events               Event[]
}

model Neighborhood {
  mapboxId  String     @id
  name      String?
  latitude  Decimal?   @db.Decimal(8, 5)
  longitude Decimal?   @db.Decimal(9, 6)
  minLat    Decimal?   @db.Decimal(8, 5)
  maxLat    Decimal?   @db.Decimal(8, 5)
  minLong   Decimal?   @db.Decimal(9, 6)
  maxLong   Decimal?   @db.Decimal(9, 6)
  locations Location[]
}

model Place {
  mapboxId  String     @id
  name      String?
  latitude  Decimal?   @db.Decimal(8, 5)
  longitude Decimal?   @db.Decimal(9, 6)
  minLat    Decimal?   @db.Decimal(8, 5)
  maxLat    Decimal?   @db.Decimal(8, 5)
  minLong   Decimal?   @db.Decimal(9, 6)
  maxLong   Decimal?   @db.Decimal(9, 6)
  locations Location[]
}

model TreeImage {
  uuid          String        @id
  width         Int?
  height        Int?
  url           String?
  isPrimary     Boolean?      @default(false)
  isLeaf        Boolean?      @default(false)
  sequence      Int?          @default(0)
  createdDate   DateTime?     @default(now())
  reviewStatus  ReviewStatus? @default(New)
  sponsorship   Sponsorship?  @relation(fields: [sponsorshipId], references: [id])
  sponsorshipId Int?
  tree          Tree?         @relation(fields: [treeId], references: [id])
  treeId        Int?
}

enum ReviewStatus {
  New
  Draft
  Approved
  Rejected
  Modified
}

model Sponsorship {
  id                 Int           @id @default(autoincrement())
  displayName        String?
  title              String?
  description        String?
  pictureUrl         String?
  startDate          DateTime?
  expirationDate     DateTime?
  isPrivate          Boolean?      @default(false)
  isPrivateLocation  Boolean?      @default(false)
  reviewStatus       ReviewStatus? @default(New)
  user               User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             Int?
  tree               Tree?         @relation(fields: [treeId], references: [id])
  treeId             Int?
  images             TreeImage[]
  primaryImageUuid   String?
  primaryImageHeight Int?
  primaryImageWidth  Int?
  Subscription       Subscription? @relation(fields: [subscriptionId], references: [id])
  subscriptionId     Int?
  comments           Comment[]
  reactions          Reaction[]
}

model Donation {
  id          Int       @id @default(autoincrement())
  eventId     Int?
  label       String?
  amount      Decimal?  @db.Decimal(6, 2)
  source      String?
  date        DateTime?
  createdDate DateTime? @default(now())
}

model StoreProduct {
  id          Int       @id @default(autoincrement())
  name        String?   @db.VarChar(128)
  description String?
  pictureUrl  String?
  price       Decimal?  @db.Decimal(6, 2)
  link        String?
  createdDate DateTime? @default(now())
}

model SubdomainRedirect {
  id          Int       @id @default(autoincrement())
  subdomain   String?   @db.VarChar(64)
  redirect    String?
  createdDate DateTime? @default(now())
}

model Form {
  id          Int       @id @default(autoincrement())
  name        String?   @db.VarChar(256)
  path        String?   @db.VarChar(256)
  description String?   @db.Text
  completedMessage String? @db.Text
  questionsJson   Json?
  createdDate DateTime? @default(now())
  deletedAt   DateTime?
  createdByUserId          Int?
  createdByUser            User?                 @relation("createdByUser", fields: [createdByUserId], references: [id], onDelete: SetNull)
  formResponses         FormResponse[]
}

model FormResponse {
  responsesJson    Json?   
  createdDate DateTime? @default(now())  
  updatedDate DateTime? @default(now()) 
  userId          Int
  user            User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  formId          Int
  form            Form    @relation(fields: [formId], references: [id], onDelete: Cascade)
  @@unique([userId, formId])
}
