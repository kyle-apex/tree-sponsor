// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Profile {
  id     Int     @id @default(autoincrement())
  bio    String?
  user   User    @relation(fields: [userId], references: [id])
  userId Int     @unique
}

model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique @map(name: "compound_id")
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token") @db.Text
  accessToken        String?   @map(name: "access_token") @db.Text
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")


  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map(name: "accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}

model User {
  id                       Int                       @id @default(autoincrement())
  name                     String?
  displayName              String?
  email                    String?                   @unique
  emailVerified            DateTime?                 @map(name: "email_verified")
  image                    String?
  hasShirt                 Boolean?                  @default(false)
  createdAt                DateTime                  @default(now()) @map(name: "created_at")
  updatedAt                DateTime                  @default(now()) @map(name: "updated_at")
  stripeCustomerId         String?                   @db.VarChar(32)
  profilePath              String?                   @db.VarChar(256)
  subscriptions            Subscription[]
  profile                  Profile?
  subscriptionsWithDetails SubscriptionWithDetails[]
  roles                    Role[]                    @relation("UserToRole")

  sponsorships Sponsorship[]
  @@map(name: "users")
}

model Role {
  id                Int     @id @default(autoincrement())
  name              String?
  isAdmin           Boolean @default(false)
  hasAuthManagement Boolean @default(false)
  users             User[]  @relation("UserToRole")
}

model VerificationRequest {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "verification_requests")
}

model Subscription {
  id               Int           @id @default(autoincrement())
  createdDate      DateTime?
  expirationDate   DateTime?
  lastPaymentDate  DateTime?
  status           String?       @db.VarChar(32)
  stripeCustomerId String?       @db.VarChar(32)
  stripeId         String?       @unique @db.VarChar(32)
  user             User?         @relation(fields: [userId], references: [id])
  userId           Int?
  product          Product?      @relation(fields: [productId], references: [id])
  productId        Int?
  sponsorships     Sponsorship[]
}

model SubscriptionWithDetails {
  id               Int       @unique
  createdDate      DateTime?
  expirationDate   DateTime?
  lastPaymentDate  DateTime?
  status           String?
  stripeId         String?
  stripeCustomerId String?
  stripeProductId  String?
  userId           Int
  userName         String?
  productId        Int
  productName      String?
  email            String?
  hasShirt         Boolean?  @default(false)
  amount           Int
  user             User      @relation(fields: [userId], references: [id])
}

model Product {
  id            Int            @id @default(autoincrement())
  stripeId      String?        @unique
  name          String?
  amount        Int?
  subscriptions Subscription[]
}

model Tree {
  id           Int           @id @default(autoincrement())
  name         String?
  pictureUrl   String?
  latitude     Decimal?      @db.Decimal(8, 5)
  longitude    Decimal?      @db.Decimal(9, 6)
  sponsorships Sponsorship[]
}

model TreeImage {
  uuid          String        @id
  width         Int?
  height        Int?
  createdDate   DateTime?
  reviewStatus  ReviewStatus? @default(New)
  Sponsorship   Sponsorship?  @relation(fields: [sponsorshipId], references: [id])
  sponsorshipId Int?
}

enum ReviewStatus {
  New
  Draft
  Approved
  Rejected
  Modified
}

model Sponsorship {
  id                 Int           @id @default(autoincrement())
  displayName        String?
  title              String?
  description        String?
  pictureUrl         String?
  startDate          DateTime?
  expirationDate     DateTime?
  isPrivate          Boolean?
  reviewStatus       ReviewStatus? @default(New)
  user               User?         @relation(fields: [userId], references: [id])
  userId             Int?
  tree               Tree?         @relation(fields: [treeId], references: [id])
  treeId             Int?
  images             TreeImage[]
  primaryImageUuid   String?
  primaryImageHeight Int?
  primaryImageWidth  Int?
  Subscription       Subscription? @relation(fields: [subscriptionId], references: [id])
  subscriptionId     Int?
}
